[comment]
/*******************************************************************************
 * UML to Php simple generator
 * Based on https://github.com/AlixBa/doctrine-generator
 *
 * This is a MTL generator template
 * See: 
 * Language Reference: http://help.eclipse.org/juno/topic/org.eclipse.acceleo.doc/pages/reference/language.html?cp=5_3_0
 * Operations: http://help.eclipse.org/juno/topic/org.eclipse.acceleo.doc/pages/reference/operations.html?cp=5_3_2
 * Text production rules: http://help.eclipse.org/juno/topic/org.eclipse.acceleo.doc/pages/reference/textproductionrules.html?cp=5_3_5
 *
 *******************************************************************************
[/comment]
[module simpleUML2php('http://www.eclipse.org/uml2/4.0.0/UML')/]

[**
 * The main entry - looks over the UML diagram and creates one php file per class.
 * If the class is contained in a package, the php file will be created in the folder with the package name.
 * @param c UML Class.
*/]
[template public generate(c : Class)]
[comment @main/]
[file (c.qualifiedName.path().concat('.php'), false, 'UTF-8')]
[c.genClass()/]
[/file]
[/template]

[**
 * Generates the class (content of the php file).
 * @param c UML Class.
*/]
[template public genClass(c : Class)]
<?php[c.generalization.genRequire()/]

/* Generated from GenMyModel */

class [c.name/] 
[if (c.generalization->isEmpty())]Extends Doctrine_Table[else][c.generalization.genGeneralization()/][/if] {
    [c.attribute.genAttribute()/]
    [c.construct()/]
    [c.ownedOperation.functions()/]
    
}
[/template]

[**
 * Generates attribute code (name and visibility).
 * If the attribute visibility is set to "package", then it will be considered as protected. 
 * @param p UML Property.
*/]
[template public genAttribute(p : Property)]
[if (p.visibility <> VisibilityKind::_package )][p.visibility/][else]protected[/if] $[p.name/];

[/template]

[**
 * Generates class inheritance (i.e., when a class inherits from an other one).
 * @param g UML Generalization (Generalisation is the ineheritance link between two classes or two interfaces).
*/]
[template public genGeneralization(g : Generalization)]
 extends [g.general->any(true).name/]
[/template]

[**
 * Generates "require" link when a class inherits from an other class.
 * @param g UML Generalization.
*/]
[template public genRequire(g : Generalization)]

require_once '[g.general->any(true).qualifiedName.path().concat('.php')/]';

[/template]

[**
 * Generates Construct function 
 * @param c UML Class.
*/]
[template public construct(c : Class)]

public function setTableDefinition() {
    [c.ownedAttribute.initialisation() /]
}
[/template]

[**
 * initialisation properties
 * @param p UML Property.
*/]
[template public initialisation(p : Property)]
    $this->hasColumn('[p.name/]','[p.type.name.toType()/]', [p.TypeSize()/], array());
[/template]


[**
 * Generates functions
 * @param o UML Operation.
*/]
[template public functions(o : Operation) ]
public function [o.name/]([for (p : Parameter | o.ownedParameter->reject(direction = ParameterDirectionKind::_return or isException)) separator (', ')][comment [p.oneLineAnnotations()/] [p.type.name/] [p.name/][/for]) {
    //TODO
}
[/template]

[**
 * Generates size of property
 * @param p UML Property.
*/]
[template public TypeSize(p : Property) ]
[if (p.type.name.toType() = 'string')]'255'[else]null[/if]
[/template]

[template public toType(s : String)]
[if (s.equalsIgnoreCase('Integer'))]'integer'[elseif (s.equalsIgnoreCase('Boolean'))]boolean[elseif (s.equalsIgnoreCase('ByteArray'))]integer[elseif (s.equalsIgnoreCase('Date'))]DateTime[elseif (s.equalsIgnoreCase('Real'))]double[elseif (s.equalsIgnoreCase('UnlimitedNatural'))]integer[elseif (s.equalsIgnoreCase('Long') or s.equalsIgnoreCase('String') or s.equalsIgnoreCase('Char'))][s.toLower()/][else]['object'/][/if]
[/template]

[**
 * Translates the given string to a path.
 * Example : A::B::C::D produces B/C/D.
 * @param n String.
*/]
[query public path(n : String) : String =
	 n.replaceAll('[^:]*::(.*)', '$1').replaceAll('::', '/')
/]